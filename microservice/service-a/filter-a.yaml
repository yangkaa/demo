apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: micro-a
  namespace: zhangqh
spec:
  configPatches:
    - applyTo: NETWORK_FILTER
      match:
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: MERGE
        value:
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  format: |
                    [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %UPSTREAM_HOST% %REQ(envoy.lb?name_out)% %REQ(envoy.lb?default)% "%DYNAMIC_METADATA(envoy.filters.http.lua)%" "%DYNAMIC_METADATA(envoy.filters.http.lua2)%" "%REQ(X-REQUEST-ID)%"
                  path: /dev/stdout
    - applyTo: HTTP_FILTER
      match:
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_request(request_handle)
                version = request_handle:headers():get('Version')
                if version then
                  request_handle:headers():add("x-version", "gray")
                end
              end
  workloadSelector:
    labels:
      service.istio.io/canonical-name: yk-service-a
